// Generated by view binder compiler. Do not edit!
package com.omkar.controller.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.GridLayout;
import android.widget.ImageButton;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.omkar.controller.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentDashboardBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final ImageButton backward;

  @NonNull
  public final GridLayout baseLayout;

  @NonNull
  public final GridLayout drawerForArena;

  @NonNull
  public final ImageButton forward;

  @NonNull
  public final ImageButton forwardLeft;

  @NonNull
  public final ImageButton forwardRight;

  @NonNull
  public final ImageButton leftBackward;

  @NonNull
  public final RadioButton radioFastestCar;

  @NonNull
  public final RadioButton radioImageRec;

  @NonNull
  public final Button resetArena;

  @NonNull
  public final ImageButton rightBackward;

  @NonNull
  public final TextView robotStatus;

  @NonNull
  public final Button sendToCar;

  @NonNull
  public final Button start;

  private FragmentDashboardBinding(@NonNull LinearLayout rootView, @NonNull ImageButton backward,
      @NonNull GridLayout baseLayout, @NonNull GridLayout drawerForArena,
      @NonNull ImageButton forward, @NonNull ImageButton forwardLeft,
      @NonNull ImageButton forwardRight, @NonNull ImageButton leftBackward,
      @NonNull RadioButton radioFastestCar, @NonNull RadioButton radioImageRec,
      @NonNull Button resetArena, @NonNull ImageButton rightBackward, @NonNull TextView robotStatus,
      @NonNull Button sendToCar, @NonNull Button start) {
    this.rootView = rootView;
    this.backward = backward;
    this.baseLayout = baseLayout;
    this.drawerForArena = drawerForArena;
    this.forward = forward;
    this.forwardLeft = forwardLeft;
    this.forwardRight = forwardRight;
    this.leftBackward = leftBackward;
    this.radioFastestCar = radioFastestCar;
    this.radioImageRec = radioImageRec;
    this.resetArena = resetArena;
    this.rightBackward = rightBackward;
    this.robotStatus = robotStatus;
    this.sendToCar = sendToCar;
    this.start = start;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentDashboardBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentDashboardBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_dashboard, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentDashboardBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.backward;
      ImageButton backward = ViewBindings.findChildViewById(rootView, id);
      if (backward == null) {
        break missingId;
      }

      id = R.id.base_layout;
      GridLayout baseLayout = ViewBindings.findChildViewById(rootView, id);
      if (baseLayout == null) {
        break missingId;
      }

      id = R.id.drawerForArena;
      GridLayout drawerForArena = ViewBindings.findChildViewById(rootView, id);
      if (drawerForArena == null) {
        break missingId;
      }

      id = R.id.forward;
      ImageButton forward = ViewBindings.findChildViewById(rootView, id);
      if (forward == null) {
        break missingId;
      }

      id = R.id.forwardLeft;
      ImageButton forwardLeft = ViewBindings.findChildViewById(rootView, id);
      if (forwardLeft == null) {
        break missingId;
      }

      id = R.id.forwardRight;
      ImageButton forwardRight = ViewBindings.findChildViewById(rootView, id);
      if (forwardRight == null) {
        break missingId;
      }

      id = R.id.leftBackward;
      ImageButton leftBackward = ViewBindings.findChildViewById(rootView, id);
      if (leftBackward == null) {
        break missingId;
      }

      id = R.id.radio_fastestCar;
      RadioButton radioFastestCar = ViewBindings.findChildViewById(rootView, id);
      if (radioFastestCar == null) {
        break missingId;
      }

      id = R.id.radio_imageRec;
      RadioButton radioImageRec = ViewBindings.findChildViewById(rootView, id);
      if (radioImageRec == null) {
        break missingId;
      }

      id = R.id.resetArena;
      Button resetArena = ViewBindings.findChildViewById(rootView, id);
      if (resetArena == null) {
        break missingId;
      }

      id = R.id.rightBackward;
      ImageButton rightBackward = ViewBindings.findChildViewById(rootView, id);
      if (rightBackward == null) {
        break missingId;
      }

      id = R.id.robotStatus;
      TextView robotStatus = ViewBindings.findChildViewById(rootView, id);
      if (robotStatus == null) {
        break missingId;
      }

      id = R.id.sendToCar;
      Button sendToCar = ViewBindings.findChildViewById(rootView, id);
      if (sendToCar == null) {
        break missingId;
      }

      id = R.id.start;
      Button start = ViewBindings.findChildViewById(rootView, id);
      if (start == null) {
        break missingId;
      }

      return new FragmentDashboardBinding((LinearLayout) rootView, backward, baseLayout,
          drawerForArena, forward, forwardLeft, forwardRight, leftBackward, radioFastestCar,
          radioImageRec, resetArena, rightBackward, robotStatus, sendToCar, start);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
